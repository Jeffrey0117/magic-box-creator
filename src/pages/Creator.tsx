import { useState, useEffect, useMemo, Suspense } from "react";
import { useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { Sheet, SheetContent, SheetFooter, SheetHeader, SheetTitle } from "@/components/ui/sheet";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";
import { Trash2, Plus, LogOut, Download, Edit, ClipboardList, User, Eye, Package, Users, TrendingUp, BarChart3, FileText, History, LayoutGrid, List } from "lucide-react";
import { Badge } from "@/components/ui/badge";
import { CountdownTimer } from "@/components/CountdownTimer";
import { generateUniqueShortCode } from "@/lib/shortcode";
import { ProfileEditDialog } from "@/components/ProfileEditDialog";
import { TemplateSelector } from "@/components/TemplateSelector";
import { Tables } from "@/integrations/supabase/types";
import { getTemplateComponent } from "@/components/templates/registry";

interface Keyword {
  id: string;
  keyword: string;
  content: string;
  created_at: string;
  short_code?: string;
  quota?: number | null;
  email_count?: number;
  today_count?: number;
  unlock_rule_enabled?: boolean;
  unlock_rule_json?: any;
}

interface EmailLog {
  id: string;
  email: string;
  unlocked_at: string;
}

interface MyRecord {
  id: string;
  keyword_id: string;
  email: string;
  unlocked_at: string;
  keywords: {
    id: string;
    keyword: string;
    content: string;
  };
}

// ÂúñÁâáÈÅéÊøæÂáΩÊï∏ - ÁßªÈô§Á©∫ÁôΩ URL
const filterEmptyImages = (urls: string[]): string[] | null => {
  const filtered = urls.filter(url => url.trim() !== '');
  return filtered.length > 0 ? filtered : null;
};

const Creator = () => {
  const [keywords, setKeywords] = useState<Keyword[]>([]);
  const [newKeyword, setNewKeyword] = useState("");
  const [newContent, setNewContent] = useState("");
  const [loading, setLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);
  const [selectedKeywordId, setSelectedKeywordId] = useState<string | null>(null);
  const [emailLogs, setEmailLogs] = useState<EmailLog[]>([]);
  const [showMyRecords, setShowMyRecords] = useState(false);
  const [myRecords, setMyRecords] = useState<MyRecord[]>([]);
  const [loadingRecords, setLoadingRecords] = useState(false);
  const [userEmail, setUserEmail] = useState("");
  const [editingKeywordId, setEditingKeywordId] = useState<string | null>(null);
  const [editKeyword, setEditKeyword] = useState("");
  const [editContent, setEditContent] = useState("");
  const [newQuota, setNewQuota] = useState("");
  const [editQuota, setEditQuota] = useState("");
  const [newExpiryDays, setNewExpiryDays] = useState("");
  const [newExpiryHours, setNewExpiryHours] = useState("");
  const [newExpiryMinutes, setNewExpiryMinutes] = useState("");
  const [editExpiryDays, setEditExpiryDays] = useState("");
  const [editExpiryHours, setEditExpiryHours] = useState("");
  const [editExpiryMinutes, setEditExpiryMinutes] = useState("");
  const [enableExpiry, setEnableExpiry] = useState(false);
  const [editEnableExpiry, setEditEnableExpiry] = useState(false);
  const [userId, setUserId] = useState("");
  const [showProfileDialog, setShowProfileDialog] = useState(false);
  const [userProfile, setUserProfile] = useState<Tables<'user_profiles'> | null>(null);
  const [newImageUrls, setNewImageUrls] = useState<string[]>([]);
  const [editImageUrls, setEditImageUrls] = useState<string[]>([]);
  const [showBatchImageDialog, setShowBatchImageDialog] = useState(false);
  const [batchImageInput, setBatchImageInput] = useState('');
  const [isEditMode, setIsEditMode] = useState(false);
  const [newPackageTitle, setNewPackageTitle] = useState('');
  const [newPackageDescription, setNewPackageDescription] = useState('');
  const [editPackageTitle, setEditPackageTitle] = useState('');
  const [editPackageDescription, setEditPackageDescription] = useState('');
  const [newRequiredFields, setNewRequiredFields] = useState({ nickname: false });
  const [editRequiredFields, setEditRequiredFields] = useState({ nickname: false });
  const [newTemplateType, setNewTemplateType] = useState('default');
  const [editTemplateType, setEditTemplateType] = useState('default');
  const [newHideAuthor, setNewHideAuthor] = useState(false);
  const [editHideAuthor, setEditHideAuthor] = useState(false);
  // ÈÄ≤ÈöéË¶èÂâáÔºàÁ∞°Âåñ UIÔºâ
  const [newUnlockEnabled, setNewUnlockEnabled] = useState(false);
  const [newUnlockKeywords, setNewUnlockKeywords] = useState('');
  const [editUnlockEnabled, setEditUnlockEnabled] = useState(false);
  const [editUnlockKeywords, setEditUnlockKeywords] = useState('');
  const [searchKeyword, setSearchKeyword] = useState('');
  const [statusFilter, setStatusFilter] = useState<'all' | 'active' | 'warning' | 'exhausted'>('all');
  const [expiryFilter, setExpiryFilter] = useState<'all' | 'active' | 'expired'>('all');
  const [viewMode, setViewMode] = useState<'card' | 'list'>('card');
  const [openRecordsDialog, setOpenRecordsDialog] = useState(false);
  // Schema probe flagsÔºàÁî®ÊñºÈÅøÂÖçÂõ†Êú™ÈÉ®ÁΩ≤ migrations ÈÄ†Êàê 400/404Ôºâ
  const [hasUnlockRulesTable, setHasUnlockRulesTable] = useState<boolean | null>(null);
  const [hasUnlockRuleColumns, setHasUnlockRuleColumns] = useState<boolean | null>(null);
  const [hasHideAuthorInfo, setHasHideAuthorInfo] = useState<boolean | null>(null);
  const navigate = useNavigate();

  // ÂïüÂãïÊôÇÊé¢Ê∏¨Ë≥áÊñôË°®/Ê¨Ñ‰ΩçÊòØÂê¶Â≠òÂú®ÔºàÈ©óË≠â migrations ÊòØÂê¶Â∑≤ÈÉ®ÁΩ≤Ôºâ
  const probeSchema = async () => {
    try {
      const ur = await supabase.from('unlock_rules').select('id').limit(1);
      if (ur.error) {
        console.warn('üîé probe unlock_rules Â§±ÊïóÔºàÁñë‰ºº 404 Ë°®‰∏çÂ≠òÂú®Ôºâ:', ur.error);
        setHasUnlockRulesTable(false);
      } else {
        setHasUnlockRulesTable(true);
      }
    } catch (e) {
      console.warn('üîé probe unlock_rules ‰æãÂ§ñ:', e);
      setHasUnlockRulesTable(false);
    }

    try {
      const kw = await supabase.from('keywords').select('id, unlock_rule_json, unlock_rule_enabled').limit(1);
      if (kw.error) {
        console.warn('üîé probe keywords.unlock_rule_* Ê¨Ñ‰ΩçÂ§±ÊïóÔºàÁñë‰ººÊú™Âä†Ê¨Ñ‰ΩçÔºâ:', kw.error);
        setHasUnlockRuleColumns(false);
      } else {
        setHasUnlockRuleColumns(true);
      }
    } catch (e) {
      console.warn('üîé probe keywords.unlock_rule_* Ê¨Ñ‰Ωç‰æãÂ§ñ:', e);
      setHasUnlockRuleColumns(false);
    }

    // Ê™¢Êü• keywords.hide_author_info Ê¨Ñ‰ΩçÔºàÈÅøÂÖç schema cache Êú™Êõ¥Êñ∞Â∞éËá¥ 400Ôºâ
    try {
      const kw2 = await supabase.from('keywords').select('id, hide_author_info').limit(1);
      if (kw2.error) {
        console.warn('üîé probe keywords.hide_author_info Ê¨Ñ‰ΩçÂ§±ÊïóÔºàÁñë‰ººÊú™Âä†Ê¨Ñ‰ΩçÊàñ schema cache Êú™Êõ¥Êñ∞Ôºâ:', kw2.error);
        setHasHideAuthorInfo(false);
      } else {
        setHasHideAuthorInfo(true);
      }
    } catch (e) {
      console.warn('üîé probe keywords.hide_author_info Ê¨Ñ‰Ωç‰æãÂ§ñ:', e);
      setHasHideAuthorInfo(false);
    }
  };
 
  useEffect(() => {
    checkAuth();
    fetchKeywords();
    fetchMyRecords();
    fetchUserProfile();
    // Êé¢Ê∏¨ schema ÁãÄÊÖã
    probeSchema();
  }, []);

  const checkAuth = async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      navigate("/login");
    } else {
      setUserEmail(session.user.email || "");
      setUserId(session.user.id);
    }
  };

  const fetchUserProfile = async () => {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) return;

    const { data, error } = await supabase
      .from('user_profiles')
      .select('*')
      .eq('id', session.user.id)
      .maybeSingle();

    console.log('üîç fetchUserProfile ÁµêÊûú:', { data, error });
    
    if (error) {
      console.error('ËºâÂÖ•ÂÄã‰∫∫Ë≥áÊñôÂ§±Êïó:', error);
    }
    
    setUserProfile(data || null);
  };

  const fetchKeywords = async () => {
    setLoading(true);
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      setLoading(false);
      return;
    }

    const { data, error } = await supabase
      .from("keywords")
      .select("*")
      .eq("creator_id", session.user.id)
      .order("created_at", { ascending: false });

    if (error) {
      toast.error("ÁÑ°Ê≥ïËºâÂÖ•ÈóúÈçµÂ≠óÂàóË°®");
      setLoading(false);
      return;
    }

    const keywordsWithStats = await Promise.all(
      (data || []).map(async (keyword) => {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        const { count: todayCount } = await supabase
          .from("email_logs")
          .select("*", { count: "exact" })
          .eq("keyword_id", keyword.id)
          .gte("unlocked_at", today.toISOString());

        return {
          ...keyword,
          email_count: keyword.current_count || 0,
          today_count: todayCount || 0,
        };
      })
    );

    setKeywords(keywordsWithStats);
    setLoading(false);
  };

  const handleAddKeyword = async (e: React.FormEvent) => {
    e.preventDefault();
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) return;

    const shortCode = await generateUniqueShortCode(supabase);
 
    const expiresAt = enableExpiry && (newExpiryDays || newExpiryHours || newExpiryMinutes)
      ? new Date(Date.now() + (parseInt(newExpiryDays || "0") * 24 * 60 + parseInt(newExpiryHours || "0") * 60 + parseInt(newExpiryMinutes || "0")) * 60 * 1000).toISOString()
      : null;

    // ÁµÑË£ùÈÄ≤ÈöéË¶èÂâáÔºàOR Ê®°ÂºèÔºåÂÖÅË®± 1+ ÈóúÈçµÂ≠óÔºâ
    let parsedNewRules: any = null;
    if (newUnlockEnabled) {
      const kws = (newUnlockKeywords || '')
        .split(',')
        .map(s => s.trim())
        .filter(s => s.length > 0);
      parsedNewRules = [{
        name: 'Â§öÈóúÈçµÂ≠óË¶èÂâá',
        keywords: kws,
        matchMode: 'OR',
      }];
    }
 
    // ÂãïÊÖãÁµÑË£ù payloadÔºåÈÅøÂÖçÊú™ÈÉ®ÁΩ≤Ê¨Ñ‰ΩçÈÄ†Êàê 400
    const insertPayload: any = {
      keyword: newKeyword.toLowerCase().trim(),
      content: newContent,
      creator_id: session.user.id,
      short_code: shortCode,
      quota: newQuota ? parseInt(newQuota) : null,
      expires_at: expiresAt,
      images: filterEmptyImages(newImageUrls),
      package_title: newPackageTitle.trim() || null,
      package_description: newPackageDescription.trim() || null,
      required_fields: newRequiredFields,
      template_type: newTemplateType,
    };
    // ÂÉÖÂú®Ê¨Ñ‰ΩçÂ≠òÂú®ÊôÇÈÄÅÂá∫ÔºåÈÅøÂÖç schema cache Êú™Âê´Ê≠§Ê¨Ñ‰ΩçÂ∞éËá¥ 400
    if (hasHideAuthorInfo === true) {
      insertPayload.hide_author_info = newHideAuthor;
    }
    if (hasUnlockRuleColumns) {
      insertPayload.unlock_rule_enabled = newUnlockEnabled;
      insertPayload.unlock_rule_json = parsedNewRules;
    }

    const { data: inserted, error } = await supabase
      .from("keywords")
      .insert(insertPayload)
      .select()
      .single();

    if (error) {
      console.error("Êñ∞Â¢ûÈóúÈçµÂ≠óÂ§±Êïó:", error);
      toast.error("Êñ∞Â¢ûÂ§±ÊïóÔºåË´ãÁ¢∫Ë™çÈóúÈçµÂ≠óÊòØÂê¶ÈáçË§á");
    } else {
      // ÂêåÊ≠•ÈÄ≤Êñ∞Ë°®Ôºà‰ΩøÁî®Êñ∞Ë°®ÔºõÂêåÊôÇ‰øùÁïô JSON ‰ΩúÁÇ∫Áõ∏ÂÆπÂÇôÊè¥Ôºâ
      try {
        if (newUnlockEnabled && inserted?.id && hasUnlockRulesTable) {
          await supabase.from('unlock_rules').delete().eq('package_id', inserted.id);
          const arr = Array.isArray(parsedNewRules) ? parsedNewRules : [];
          if (arr.length > 0) {
            const rows = arr.map((r: any) => ({
              package_id: inserted.id,
              name: r.name ?? null,
              keywords: Array.isArray(r.keywords) ? r.keywords : [],
              match_mode: 'OR',
              quota: r.quota ?? null,
              start_at: r.startAt ? new Date(r.startAt).toISOString() : null,
              end_at: r.endAt ? new Date(r.endAt).toISOString() : null,
              error_message: r.errorMessage ?? null,
            }));
            if (rows.length > 0) {
              await supabase.from('unlock_rules').insert(rows);
            }
          }
        } else if (newUnlockEnabled && inserted?.id && hasUnlockRulesTable === false) {
          console.warn('üîß unlock_rules Ë°®‰∏çÂ≠òÂú®ÔºåË∑≥ÈÅéÊèíÂÖ•Ôºà‰ΩøÁî® JSON ÂÇôÊè¥Ôºâ');
        }
      } catch (e) {
        console.warn('ÂêåÊ≠• unlock_rules Â§±ÊïóÔºàÂ∞á‰ΩøÁî® JSON ‰ΩúÁÇ∫ÂÇôÊè¥Ôºâ:', e);
      }
      toast.success("ÈóúÈçµÂ≠óÂ∑≤Êñ∞Â¢ûÔºÅ");
      setNewKeyword("");
      setNewContent("");
      setNewQuota("");
      setNewExpiryDays("");
      setNewExpiryHours("");
      setNewExpiryMinutes("");
      setEnableExpiry(false);
      setNewImageUrls([]);
      setNewPackageTitle('');
      setNewPackageDescription('');
      setNewRequiredFields({ nickname: false });
      setNewTemplateType('default');
      setNewHideAuthor(false);
      setNewUnlockEnabled(false);
      setNewUnlockKeywords('');
      setShowAddForm(false);
      fetchKeywords();
    }
  };

  const handleDelete = async (id: string, keyword: string) => {
    const userInput = prompt(`‚ö†Ô∏è Âç±Èö™Êìç‰ΩúÔºÅÂà™Èô§ÂæåÁÑ°Ê≥ïÂæ©Âéü\n\nË´ãËº∏ÂÖ•ÈóúÈçµÂ≠ó„Äå${keyword}„Äç‰ª•Á¢∫Ë™çÂà™Èô§Ôºö`);
    
    if (userInput !== keyword) {
      if (userInput !== null) {
        toast.error("ÈóúÈçµÂ≠ó‰∏çÁ¨¶ÔºåÂèñÊ∂àÂà™Èô§");
      }
      return;
    }

    const { error } = await supabase.from("keywords").delete().eq("id", id);

    if (error) {
      console.error("Âà™Èô§ÈóúÈçµÂ≠óÂ§±Êïó:", error);
      toast.error("Âà™Èô§Â§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶");
    } else {
      toast.success("Â∑≤Âà™Èô§");
      fetchKeywords();
    }
  };

  const handleEdit = async (item: any) => {
    setEditingKeywordId(item.id);
    setEditKeyword(item.keyword);
    setEditContent(item.content);
    setEditQuota(item.quota?.toString() || "");
    setEditImageUrls(item.images || []);
    setEditPackageTitle(item.package_title || '');
    setEditPackageDescription(item.package_description || '');
    setEditRequiredFields(
      item.required_fields
        ? (typeof item.required_fields === 'object' ? item.required_fields as any : { nickname: false })
        : { nickname: false }
    );
    setEditTemplateType(item.template_type || 'default');
    setEditHideAuthor(!!item.hide_author_info);

    // Ë®≠ÂÆöÁ∞°ÂåñË¶èÂâáÊ¨Ñ‰ΩçÔºàÈ†êË®≠ÂèñËàä JSON ÁöÑÁ¨¨‰∏ÄÁµÑÔºâ
    setEditUnlockEnabled(!!item.unlock_rule_enabled);
    (() => {
      const fromJson = Array.isArray(item.unlock_rule_json) ? item.unlock_rule_json : [];
      if (fromJson && fromJson.length > 0) {
        const r = fromJson[0];
        setEditUnlockKeywords(Array.isArray(r.keywords) ? r.keywords.join(', ') : '');
      } else {
        setEditUnlockKeywords('');
      }
    })();

    // Ëã•Êñ∞Ë°®ÊúâË≥áÊñôÔºåÂÑ™ÂÖà‰ª•Êñ∞Ë°®Á¨¨‰∏ÄÁ≠ÜË¶ÜËìãÔºà‰ΩøÁî®Êñ∞Ë°®Ôºå‰∏¶‰øùÁïôÂêëÂæåÁõ∏ÂÆπÔºâ
    try {
      const { data: ruleRows } = await supabase
        .from('unlock_rules')
        .select('*')
        .eq('package_id', item.id);
      if (ruleRows && ruleRows.length > 0) {
        setEditUnlockEnabled(true);
        const r = ruleRows[0];
        const kws = Array.isArray(r.keywords) ? r.keywords : [];
        setEditUnlockKeywords(kws.join(', '));
      }
    } catch {}
    
    if (item.expires_at) {
      setEditEnableExpiry(true);
      const now = new Date().getTime();
      const expiry = new Date(item.expires_at).getTime();
      const minutesLeft = Math.ceil((expiry - now) / (1000 * 60));
      const daysLeft = Math.floor(minutesLeft / (24 * 60));
      const hoursLeft = Math.floor((minutesLeft % (24 * 60)) / 60);
      const remainingMinutes = minutesLeft % 60;
      
      setEditExpiryDays(daysLeft.toString());
      setEditExpiryHours(hoursLeft.toString().padStart(2, '0'));
      setEditExpiryMinutes(remainingMinutes.toString().padStart(2, '0'));
    } else {
      setEditEnableExpiry(false);
      setEditExpiryDays("");
      setEditExpiryHours("");
      setEditExpiryMinutes("");
    }
  };

  const handleUpdateKeyword = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingKeywordId) return;

    let expiresAt: string | null = null;
    
    if (editEnableExpiry && (editExpiryDays || editExpiryHours || editExpiryMinutes)) {
      const days = parseInt(editExpiryDays || "0");
      const hours = parseInt(editExpiryHours || "0");
      const minutes = parseInt(editExpiryMinutes || "0");
      const totalMs = (days * 24 * 60 + hours * 60 + minutes) * 60 * 1000;
      expiresAt = new Date(Date.now() + totalMs).toISOString();
    }

    // ÁµÑË£ùÈÄ≤ÈöéË¶èÂâáÔºàOR Ê®°ÂºèÔºåÂÖÅË®± 1+ ÈóúÈçµÂ≠óÔºâ
    let parsedEditRules: any = null;
    let hasValidRule = false;
    if (editUnlockEnabled) {
      const kws = (editUnlockKeywords || '')
        .split(',')
        .map(s => s.trim().toLowerCase())
        .filter(s => s.length > 0);
      if (kws.length > 0) {
        parsedEditRules = [{
          name: 'Â§öÈóúÈçµÂ≠óË¶èÂâá',
          keywords: kws,
          matchMode: 'OR',
        }];
        hasValidRule = true;
      } else {
        // Ëã•ÂïüÁî®‰ΩÜÊ≤íÊúâ‰ªª‰ΩïÊúâÊïàÈóúÈçµÂ≠óÔºåÈÅøÂÖçÈÄÅÂá∫ÁÑ°Êïà JSON ÈÄ†Êàê 400
        parsedEditRules = null;
        hasValidRule = false;
      }
    }

    // ÂãïÊÖãÁµÑË£ù payloadÔºåÈÅøÂÖçÊú™ÈÉ®ÁΩ≤Ê¨Ñ‰ΩçÈÄ†Êàê 400
    const updatePayload: any = {
      keyword: editKeyword.toLowerCase().trim(),
      content: editContent,
      quota: editQuota ? parseInt(editQuota) : null,
      expires_at: expiresAt,
      images: filterEmptyImages(editImageUrls),
      package_title: editPackageTitle.trim() || null,
      package_description: editPackageDescription.trim() || null,
      required_fields: editRequiredFields,
      template_type: editTemplateType,
    };
    // ÂÉÖÂú®Ê¨Ñ‰ΩçÂ≠òÂú®ÊôÇÈÄÅÂá∫ÔºåÈÅøÂÖç schema cache Êú™Âê´Ê≠§Ê¨Ñ‰ΩçÂ∞éËá¥ 400
    if (hasHideAuthorInfo === true) {
      updatePayload.hide_author_info = editHideAuthor;
    }
    if (hasUnlockRuleColumns) {
      if (editUnlockEnabled && hasValidRule && Array.isArray(parsedEditRules)) {
        updatePayload.unlock_rule_enabled = true;
        updatePayload.unlock_rule_json = parsedEditRules;
      } else {
        // Ëã•Êú™ÂïüÁî®ÊàñÁÑ°ÊúâÊïàË¶èÂâáÔºåÁ¢∫‰øùÊ¨Ñ‰ΩçÁÇ∫ÈóúÈñâÁãÄÊÖã‰∏¶Ê∏ÖÁ©∫ JSONÔºåÈÅøÂÖç 400
        updatePayload.unlock_rule_enabled = false;
        updatePayload.unlock_rule_json = null;
      }
    }

    // ÈÄÅÂá∫ÂâçË®òÈåÑ payloadÔºàÂÅµÈåØ 400 Áî®Ôºâ
    try {
      console.debug("üõ∞Ô∏è keywords.update payload:", JSON.stringify(updatePayload));
    } catch {}

    const { error } = await supabase
      .from("keywords")
      .update(updatePayload)
      .eq("id", editingKeywordId);

    if (error) {
      // Ë£úÂÖÖÊõ¥Â§öÈåØË™§Ë®äÊÅØ‰ª•ÂÆö‰Ωç 400 ‰æÜÊ∫ê
      console.error("Êõ¥Êñ∞ÈóúÈçµÂ≠óÂ§±Êïó:", {
        message: (error as any)?.message,
        details: (error as any)?.details,
        hint: (error as any)?.hint,
        code: (error as any)?.code,
      });
      toast.error("Êõ¥Êñ∞Â§±ÊïóÔºåË´ãÁ®çÂæåÂÜçË©¶");
    } else {
      // ‰ΩøÁî®Êñ∞Ë°®ÂêåÊ≠•ÔºàËã•ÂïüÁî®ÔºâÔºåÂê¶ÂâáÊ∏ÖÁ©∫Ë¶èÂâáË°®Ë≥áÊñô‰ª•ÂõûÈÄÄÁÇ∫ÂÅúÁî®ÁãÄÊÖãÔºàÂêëÂæåÁõ∏ÂÆπ‰øùÁïô JSONÔºâ
      try {
        if (editingKeywordId) {
          if (editUnlockEnabled && hasUnlockRulesTable) {
            await supabase.from('unlock_rules').delete().eq('package_id', editingKeywordId);
            const arr = Array.isArray(parsedEditRules) ? parsedEditRules : [];
            if (arr.length > 0) {
              const rows = arr.map((r: any) => ({
                package_id: editingKeywordId,
                name: r.name ?? null,
                keywords: Array.isArray(r.keywords) ? r.keywords : [],
                match_mode: 'OR',
                quota: r.quota ?? null,
                start_at: r.startAt ? new Date(r.startAt).toISOString() : null,
                end_at: r.endAt ? new Date(r.endAt).toISOString() : null,
                error_message: r.errorMessage ?? null,
              }));
              if (rows.length > 0) {
                await supabase.from('unlock_rules').insert(rows);
              }
            }
          } else if (editUnlockEnabled && hasUnlockRulesTable === false) {
            console.warn('üîß unlock_rules Ë°®‰∏çÂ≠òÂú®ÔºàÊõ¥Êñ∞ÔºâÔºåË∑≥ÈÅéÂêåÊ≠•Ôºà‰ΩøÁî® JSON ÂÇôÊè¥Ôºâ');
          } else if (hasUnlockRulesTable) {
            // ÂÅúÁî®Ë¶èÂâáÊôÇÊ∏ÖÁêÜ unlock_rulesÔºàËã•Ë°®Â≠òÂú®Ôºâ
            await supabase.from('unlock_rules').delete().eq('package_id', editingKeywordId);
          }
        }
      } catch (e) {
        console.warn('ÂêåÊ≠• unlock_rulesÔºàÊõ¥Êñ∞ÔºâÂ§±ÊïóÔºàÂ∞á‰ΩøÁî® JSON ‰ΩúÁÇ∫ÂÇôÊè¥Ôºâ:', e);
      }

      toast.success("Êõ¥Êñ∞ÊàêÂäüÔºÅ");
      setEditingKeywordId(null);
      setEditKeyword("");
      setEditContent("");
      setEditQuota("");
      setEditExpiryDays("");
      setEditExpiryHours("");
      setEditExpiryMinutes("");
      setEditEnableExpiry(false);
      setEditImageUrls([]);
      setEditPackageTitle('');
      setEditPackageDescription('');
      setEditRequiredFields({ nickname: false });
      setEditTemplateType('default');
      setEditUnlockEnabled(false);
      setEditUnlockKeywords('');
      setEditHideAuthor(false);
      fetchKeywords();
    }
  };

  const handleBatchImagePaste = () => {
    const urls = batchImageInput
      .split('\n')
      .map(url => url.trim())
      .filter(url => url !== '')
      .slice(0, 5);
    
    if (isEditMode) {
      setEditImageUrls(urls);
    } else {
      setNewImageUrls(urls);
    }
    
    setShowBatchImageDialog(false);
    setBatchImageInput('');
    toast.success(`Â∑≤ÂåØÂÖ• ${urls.length} ÂºµÂúñÁâá`);
  };

  const cancelEdit = () => {
    setEditingKeywordId(null);
    setEditKeyword("");
    setEditContent("");
    setEditQuota("");
    setEditExpiryDays("");
    setEditExpiryHours("");
    setEditExpiryMinutes("");
    setEditEnableExpiry(false);
    setEditImageUrls([]);
    setEditPackageTitle('');
    setEditPackageDescription('');
    setEditRequiredFields({ nickname: false });
    setEditTemplateType('default');
    // reset simplified unlock rule editor states
    setEditUnlockEnabled(false);
    setEditUnlockKeywords('');
    setEditHideAuthor(false);
  };

  const fetchEmailLogs = async (keywordId: string) => {
    const { data, error } = await supabase
      .from("email_logs")
      .select("id, email, unlocked_at")
      .eq("keyword_id", keywordId)
      .order("unlocked_at", { ascending: false });

    if (error) {
      console.error("ËºâÂÖ•È†òÂèñË®òÈåÑÂ§±Êïó:", error);
      toast.error("ÁÑ°Ê≥ïËºâÂÖ•È†òÂèñË®òÈåÑÔºåË´ãÈáçÊñ∞Êï¥ÁêÜÈ†ÅÈù¢");
    } else {
      setEmailLogs(data || []);
      setSelectedKeywordId(keywordId);
    }
  };

  const fetchMyRecords = async () => {
    setLoadingRecords(true);
    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      setLoadingRecords(false);
      return;
    }

    const { data, error } = await supabase
      .from("email_logs")
      .select(`
        id,
        keyword_id,
        email,
        unlocked_at,
        keywords (
          id,
          keyword,
          content
        )
      `)
      .eq("email", session.user.email)
      .order("unlocked_at", { ascending: false });

    if (error) {
      console.error("ËºâÂÖ•ÊàëÁöÑÈ†òÂèñË®òÈåÑÂ§±Êïó:", error);
      toast.error("ÁÑ°Ê≥ïËºâÂÖ•È†òÂèñË®òÈåÑÔºåË´ãÁ®çÂæåÂÜçË©¶");
    } else {
      setMyRecords(data || []);
    }
    setLoadingRecords(false);
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    navigate("/login");
  };

  const handleDeleteEmailLog = async (logId: string, email: string) => {
    if (!confirm(`Á¢∫ÂÆöË¶ÅÂà™Èô§ ${email} ÁöÑÈ†òÂèñË®òÈåÑÂóéÔºü`)) {
      return;
    }

    const { data: { session } } = await supabase.auth.getSession();
    if (!session) {
      toast.error("Ë´ãÂÖàÁôªÂÖ•");
      navigate("/login");
      return;
    }

    const { data, error } = await supabase
      .from("email_logs")
      .delete()
      .eq("id", logId)
      .select();

    if (error) {
      console.error("Âà™Èô§È†òÂèñË®òÈåÑÂ§±Êïó:", error);
      toast.error(`Âà™Èô§Â§±ÊïóÔºö${error.message || "Ë´ãÁ®çÂæåÂÜçË©¶"}`);
      return;
    }

    if (!data || data.length === 0) {
      console.warn("Âà™Èô§‰ºº‰πéÊ≤íÊúâÂΩ±Èüø‰ªª‰ΩïË®òÈåÑ");
      toast.error("Âà™Èô§Â§±ÊïóÔºöÊâæ‰∏çÂà∞Ë©≤Ë®òÈåÑÊàñÁÑ°Ê¨äÈôêÂà™Èô§");
      return;
    }
    
    console.log("Âà™Èô§ÊàêÂäüÔºåÂèóÂΩ±ÈüøÁöÑË®òÈåÑ:", data);
    toast.success("Â∑≤Âà™Èô§Ë©≤Á≠ÜË®òÈåÑ");
    
    if (selectedKeywordId) {
      await fetchEmailLogs(selectedKeywordId);
    }
    
    await fetchKeywords();
  };

  const exportToCSV = (keywordId: string, keywordName: string) => {
    const logs = emailLogs.filter(log => log.email);
    
    if (logs.length === 0) {
      toast.error("Ê≤íÊúâÂèØÂåØÂá∫ÁöÑË®òÈåÑ");
      return;
    }
    
    const csvContent = [
      'Email,È†òÂèñÊôÇÈñì',
      ...logs.map(log => `${log.email},${new Date(log.unlocked_at).toLocaleString('zh-TW')}`)
    ].join('\n');
    
    const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `keybox_${keywordName}_${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
    URL.revokeObjectURL(url);
    
    toast.success('Â∑≤ÂåØÂá∫ CSV Ê™îÊ°àÔºÅ');
  };

  // Ë®àÁÆóÂÑÄË°®ÊùøÁµ±Ë®àÊï∏Êìö
  const dashboardStats = useMemo(() => {
    const totalPackages = keywords.length;
    const totalClaims = keywords.reduce((sum, item) => sum + (item.email_count || 0), 0);
    const todayGrowth = keywords.reduce((sum, item) => sum + (item.today_count || 0), 0);
    
    return { totalPackages, totalClaims, todayGrowth };
  }, [keywords]);

  // Ë®àÁÆóÊòØÂê¶ÈÅéÊúü
  const isExpired = (item: Keyword): boolean => {
    if (!item.expires_at) return false;
    return new Date(item.expires_at).getTime() <= Date.now();
  };

  // ÂèñÂæóÈóúÈçµÂ≠óÁãÄÊÖã
  const getKeywordStatus = (item: Keyword): 'active' | 'warning' | 'exhausted' => {
    if (!item.quota) return 'active';
    const remaining = item.quota - (item.email_count || 0);
    const percentage = remaining / item.quota;
    
    if (remaining <= 0) return 'exhausted';
    if (percentage <= 0.2) return 'warning';
    return 'active';
  };

  // ÁØ©ÈÅ∏ÈóúÈçµÂ≠ó
  const filteredKeywords = useMemo(() => {
    return keywords.filter(item => {
      // ÊêúÂ∞ãÈÅéÊøæ
      const matchesSearch = searchKeyword.trim() === '' ||
        item.keyword.toLowerCase().includes(searchKeyword.toLowerCase()) ||
        item.content.toLowerCase().includes(searchKeyword.toLowerCase());
      
      // ÁãÄÊÖãÈÅéÊøæ
      const matchesStatus = statusFilter === 'all' || getKeywordStatus(item) === statusFilter;
      
      // ÈÅéÊúüÁãÄÊÖãÈÅéÊøæ
      const matchesExpiry = expiryFilter === 'all' ||
        (expiryFilter === 'expired' && isExpired(item)) ||
        (expiryFilter === 'active' && !isExpired(item));
      
      return matchesSearch && matchesStatus && matchesExpiry;
    });
  }, [keywords, searchKeyword, statusFilter, expiryFilter]);

  return (
    <div className="min-h-screen p-4 md:p-8">
      <div className="max-w-6xl mx-auto">
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-8">
          <div className="flex-1 min-w-0">
            <h1 className="text-2xl md:text-3xl lg:text-4xl font-bold text-gradient">KeyBox ÁÆ°ÁêÜÈù¢Êùø üîë</h1>
            <p className="text-sm md:text-base text-muted-foreground mt-2 break-all">
              {userEmail && <span className="font-medium text-accent">{userEmail}</span>}
              {userEmail && " - "}
              ÁÆ°ÁêÜÊÇ®ÁöÑÈóúÈçµÂ≠óËàáÂÖßÂÆπ
            </p>
          </div>
          <Button
            onClick={handleLogout}
            variant="ghost"
            className="gap-2 shrink-0"
          >
            <LogOut className="w-4 h-4" />
            <span className="hidden sm:inline">ÁôªÂá∫</span>
          </Button>
        </div>

        {/* È†ÇÈÉ®ÂÑÄË°®Êùø - ‰∏âÂÄãÈóúÈçµÊåáÊ®ô */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          {/* Á∏ΩË≥áÊñôÂåÖÊï∏ - Á¥´Ëâ≤ */}
          <Card className="bg-gradient-to-br from-purple-500/10 to-purple-600/5 border-purple-500/20 hover:shadow-lg transition-shadow">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                <Package className="w-4 h-4" />
                Á∏ΩË≥áÊñôÂåÖ
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-purple-600 dark:text-purple-400">
                {dashboardStats.totalPackages}
              </div>
              <p className="text-xs text-muted-foreground mt-1">ÂÄãË≥áÊñôÂåÖ</p>
            </CardContent>
          </Card>

          {/* Á∏ΩÈ†òÂèñÊï∏ - ËóçËâ≤ */}
          <Card className="bg-gradient-to-br from-blue-500/10 to-blue-600/5 border-blue-500/20 hover:shadow-lg transition-shadow">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                <Users className="w-4 h-4" />
                Á∏ΩÈ†òÂèñÊï∏
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-blue-600 dark:text-blue-400">
                {dashboardStats.totalClaims}
              </div>
              <p className="text-xs text-muted-foreground mt-1">Á¥ØË®àÈ†òÂèñ‰∫∫Ê¨°</p>
            </CardContent>
          </Card>

          {/* ‰ªäÊó•Êñ∞Â¢û - Á∂†Ëâ≤ */}
          <Card className="bg-gradient-to-br from-green-500/10 to-green-600/5 border-green-500/20 hover:shadow-lg transition-shadow">
            <CardHeader className="pb-3">
              <CardTitle className="text-sm font-medium text-muted-foreground flex items-center gap-2">
                <TrendingUp className="w-4 h-4" />
                ‰ªäÊó•Êñ∞Â¢û
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-3xl font-bold text-green-600 dark:text-green-400">
                +{dashboardStats.todayGrowth}
              </div>
              <p className="text-xs text-muted-foreground mt-1">‰ªäÊó•È†òÂèñ‰∫∫Ê¨°</p>
            </CardContent>
          </Card>
        </div>

        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <User className="w-5 h-5" />
              ÂÄã‰∫∫Ë≥áÊñô
            </CardTitle>
            <CardDescription>ÊÇ®ÁöÑÂÖ¨ÈñãË≥áÊñôÔºåÂ∞áÈ°ØÁ§∫Âú®Ë≥áÊñôÂåÖÂâµ‰ΩúËÄÖË≥áË®ä‰∏≠</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-muted-foreground mb-1">Email</p>
                <p className="font-medium">{userEmail}</p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground mb-1">Êö±Á®±</p>
                <p className="font-medium">{userProfile?.display_name || '(Êú™Ë®≠ÂÆö)'}</p>
              </div>
            </div>
            {userProfile?.bio && (
              <div>
                <p className="text-sm text-muted-foreground mb-1">Ëá™Êàë‰ªãÁ¥π</p>
                <p className="text-sm">{userProfile.bio}</p>
              </div>
            )}
            <Button
              onClick={() => setShowProfileDialog(true)}
              variant="outline"
              className="gap-2"
            >
              <Edit className="w-4 h-4" />
              Á∑®ËºØÂÄã‰∫∫Ë≥áÊñô
            </Button>
          </CardContent>
        </Card>

        <ProfileEditDialog
          open={showProfileDialog}
          onOpenChange={(open) => {
            setShowProfileDialog(open);
            if (!open) fetchUserProfile();
          }}
          userId={userId}
          userEmail={userEmail}
        />

        <div className="glass-card rounded-2xl p-6 md:p-8 shadow-card">
          <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3 mb-6">
            <h2 className="text-lg md:text-xl font-semibold">ÈóúÈçµÂ≠óÂàóË°®</h2>
            <Button
              size="lg"
              onClick={() => setShowAddForm(!showAddForm)}
              className="px-8 py-5 md:py-6 text-lg font-semibold hover:bg-yellow-50 hover:text-yellow-700 hover:border-yellow-300 transition-colors w-full sm:w-auto"
            >
              <Plus className="w-5 h-5 mr-2" />
              üî• Êñ∞Â¢ûÈóúÈçµÂ≠ó
            </Button>
          </div>

          {/* ÊêúÂ∞ãËàáÁØ©ÈÅ∏ÂçÄ */}
          <div className="mb-6 space-y-3">
            <div className="flex flex-col lg:flex-row gap-3">
              {/* ÊêúÂ∞ãÊ°Ü */}
              <div className="flex-1">
                <Input
                  placeholder="üîç ÊêúÂ∞ãÈóúÈçµÂ≠óÊàñÂÖßÂÆπ..."
                  value={searchKeyword}
                  onChange={(e) => setSearchKeyword(e.target.value)}
                  className="h-10"
                />
              </div>
              
              {/* ÁãÄÊÖãÁØ©ÈÅ∏ */}
              <div className="flex gap-2 flex-wrap sm:flex-nowrap">
                <Button
                  variant={statusFilter === 'all' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setStatusFilter('all')}
                  className="flex-1 sm:flex-none"
                >
                  ÂÖ®ÈÉ®
                </Button>
                <Button
                  variant={statusFilter === 'active' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setStatusFilter('active')}
                  className="flex-1 sm:flex-none gap-1"
                >
                  <span className="w-2 h-2 rounded-full bg-green-500"></span>
                  ‰ΩøÁî®‰∏≠
                </Button>
                <Button
                  variant={statusFilter === 'warning' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setStatusFilter('warning')}
                  className="flex-1 sm:flex-none gap-1"
                >
                  <span className="w-2 h-2 rounded-full bg-yellow-500"></span>
                  Âç≥Â∞áÁî®ÂÆå
                </Button>
                <Button
                  variant={statusFilter === 'exhausted' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setStatusFilter('exhausted')}
                  className="flex-1 sm:flex-none gap-1"
                >
                  <span className="w-2 h-2 rounded-full bg-red-500"></span>
                  Â∑≤Áî®ÂÆå
                </Button>
              </div>

              {/* ÈÅéÊúüÁãÄÊÖãÁØ©ÈÅ∏ */}
              <div className="border-l pl-3">
                <Select value={expiryFilter} onValueChange={(value: 'all' | 'active' | 'expired') => setExpiryFilter(value)}>
                  <SelectTrigger className="w-[140px] h-9">
                    <SelectValue placeholder="ÊôÇÊïàÁØ©ÈÅ∏" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">ÂÖ®ÈÉ®ÊôÇÊïà</SelectItem>
                    <SelectItem value="active">‚è∞ ‰ΩøÁî®‰∏≠ÔºàÊú™ÈÅéÊúüÔºâ</SelectItem>
                    <SelectItem value="expired">‚õî Â∑≤ÈÅéÊúü</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* Ë¶ñÂúñÊ®°ÂºèÂàáÊèõ */}
              <div className="flex gap-2 border-l pl-3">
                <Button
                  variant={viewMode === 'card' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setViewMode('card')}
                  className="gap-2"
                  title="Âç°ÁâáÊ®°Âºè"
                >
                  <LayoutGrid className="w-4 h-4" />
                  <span className="hidden sm:inline">Âç°Áâá</span>
                </Button>
                <Button
                  variant={viewMode === 'list' ? 'default' : 'outline'}
                  size="sm"
                  onClick={() => setViewMode('list')}
                  className="gap-2"
                  title="ÂàóË°®Ê®°Âºè"
                >
                  <List className="w-4 h-4" />
                  <span className="hidden sm:inline">ÂàóË°®</span>
                </Button>
              </div>
            </div>
            
            {/* È°ØÁ§∫ÁØ©ÈÅ∏ÁµêÊûúÁµ±Ë®à */}
            {(searchKeyword || statusFilter !== 'all' || expiryFilter !== 'all') && (
              <div className="text-sm text-muted-foreground">
                ÊâæÂà∞ {filteredKeywords.length} ÂÄãÈóúÈçµÂ≠ó
                {searchKeyword && ` (ÊêúÂ∞ã: "${searchKeyword}")`}
              </div>
            )}
          </div>

          <Button
            onClick={() => {
              setShowMyRecords(!showMyRecords);
              if (!showMyRecords && myRecords.length === 0) {
                fetchMyRecords();
              }
            }}
            variant="outline"
            className="mb-4 w-full md:w-auto"
          >
            {showMyRecords ? "Èö±Ëóè" : "Êü•Áúã"}ÊàëÁöÑÈ†òÂèñË®òÈåÑ
          </Button>

          {showMyRecords && (
            <div className="mb-6 p-4 bg-muted/30 rounded-lg">
              <h3 className="font-semibold mb-3">ÊàëÈ†òÂèñÈÅéÁöÑË≥áÊñôÂåÖ</h3>
              {loadingRecords ? (
                <div className="text-center py-4 text-muted-foreground">ËºâÂÖ•‰∏≠...</div>
              ) : myRecords.length === 0 ? (
                <div className="text-center py-4 text-muted-foreground">
                  ÈÇÑÊ≤íÊúâÈ†òÂèñ‰ªª‰ΩïË≥áÊñôÂåÖ
                </div>
              ) : (
                <div className="space-y-2 max-h-60 overflow-y-auto">
                 {myRecords.map((record) => (
                   <div
                     key={record.id}
                     className="flex flex-col sm:flex-row gap-3 p-3 bg-background rounded"
                   >
                     <div className="flex-1 min-w-0">
                       <p className="font-medium text-sm md:text-base">
                         ÈóúÈçµÂ≠óÔºö{record.keywords?.keyword}
                       </p>
                       <p className="text-xs md:text-sm text-muted-foreground truncate">
                         {record.keywords?.content}
                       </p>
                       <p className="text-xs text-muted-foreground mt-1">
                         {new Date(record.unlocked_at).toLocaleString('zh-TW')}
                       </p>
                     </div>
                     <Button
                       size="sm"
                       onClick={() => navigate(`/box/${record.keyword_id}`)}
                       className="shrink-0 w-full sm:w-auto"
                     >
                       ÈáçÊñ∞Êü•Áúã
                     </Button>
                   </div>
                  ))}
                </div>
              )}
            </div>
          )}

          {showAddForm && (
            <form onSubmit={handleAddKeyword} className="mb-6 p-4 md:p-6 rounded-lg bg-muted/50 space-y-3 md:space-y-4">
              <Input
                placeholder="ÈóúÈçµÂ≠óÔºà‰æãÂ¶ÇÔºöhelloÔºâ"
                value={newKeyword}
                onChange={(e) => setNewKeyword(e.target.value)}
                required
                className="h-12 md:h-10"
              />
              <Textarea
                placeholder="ÂõûË¶ÜÂÖßÂÆπÔºàÊîØÊè¥Â§öË°åÔºâ&#10;‰æãÂ¶ÇÔºö&#10;üéâ ÊÅ≠ÂñúÈ†òÂèñÔºÅ&#10;&#10;üìã Notion ÈÄ£ÁµêÔºöhttps://notion.so/xxx&#10;üé® Á¥†ÊùêÂåÖÔºöhttps://drive.google.com/xxx"
                value={newContent}
                onChange={(e) => setNewContent(e.target.value)}
                required
                className="min-h-[120px] resize-y"
              />
              <Input
                type="number"
                placeholder="ÈôêÈ°çÊï∏ÈáèÔºàÁïôÁ©∫=ÁÑ°ÈôêÂà∂Ôºâ"
                value={newQuota}
                onChange={(e) => setNewQuota(e.target.value)}
                min="1"
                className="h-12 md:h-10"
              />
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <input
                    type="checkbox"
                    checked={enableExpiry}
                    onChange={(e) => setEnableExpiry(e.target.checked)}
                    className="w-4 h-4"
                  />
                  <span className="text-sm">ÂïüÁî®ÈôêÊôÇÈ†òÂèñ</span>
                </div>
                {enableExpiry && (
                  <div className="flex items-center gap-2 flex-wrap">
                    <Input
                      type="text"
                      inputMode="numeric"
                      value={newExpiryDays}
                      onChange={(e) => setNewExpiryDays(e.target.value.replace(/\D/g, ''))}
                      placeholder="0"
                      className="w-16 h-10"
                    />
                    <span className="text-sm">Â§©</span>
                    <Input
                      type="text"
                      inputMode="numeric"
                      value={newExpiryHours}
                      onChange={(e) => {
                        const val = e.target.value.replace(/\D/g, '');
                        setNewExpiryHours(val ? val.padStart(2, '0') : '');
                      }}
                      placeholder="00"
                      maxLength={2}
                      className="w-16 h-10"
                    />
                    <span className="text-sm">Â∞èÊôÇ</span>
                    <Input
                      type="text"
                      inputMode="numeric"
                      value={newExpiryMinutes}
                      onChange={(e) => {
                        const val = e.target.value.replace(/\D/g, '');
                        const num = parseInt(val || '0');
                        if (num <= 59) {
                          setNewExpiryMinutes(val ? val.padStart(2, '0') : '');
                        }
                      }}
                      placeholder="00"
                      maxLength={2}
                      className="w-16 h-10"
                    />
                    <span className="text-sm">ÂàÜÈêòÂæåÂ§±Êïà</span>
                  </div>
                )}
              <div className="space-y-3">
                <div>
                  <Label>üì¶ Ë≥áÊñôÂåÖÊ®ôÈ°åÔºàÈÅ∏Â°´Ôºâ</Label>
                  <Input
                    value={newPackageTitle}
                    onChange={(e) => setNewPackageTitle(e.target.value)}
                    placeholder="‰æãÂ¶ÇÔºöüé® Ë®≠Ë®àÂ∏´Â∞àÂ±¨Ë≥áÊ∫êÂåÖ"
                    maxLength={50}
                    className="h-10 mt-1"
                  />
                  <p className="text-xs text-muted-foreground mt-1">
                    È°ØÁ§∫Âú®Ë≥áÊñôÂåÖÈ†ÅÈù¢È†ÇÈÉ®ÔºåÊúÄÂ§ö 50 Â≠ó
                  </p>
                </div>
                <div>
                  <Label>üìù Ë≥áÊñôÂåÖ‰ªãÁ¥πÔºàÈÅ∏Â°´Ôºâ</Label>
                  <Textarea
                    value={newPackageDescription}
                    onChange={(e) => setNewPackageDescription(e.target.value)}
                    placeholder="‰ªãÁ¥πÈÄôÂÄãË≥áÊñôÂåÖÁöÑÂÖßÂÆπ„ÄÅÈÅ©ÂêàË™∞‰ΩøÁî®..."
                    rows={3}
                    maxLength={300}
                    className="mt-1"
                  />
                  <p className="text-xs text-muted-foreground mt-1">
                    È°ØÁ§∫Âú®Ë≥áÊñôÂåÖÂúñÁâá‰∏äÊñπÔºåÊúÄÂ§ö 300 Â≠ó
                   </p>
                 </div>
               </div>
               <div className="space-y-2">
                 <Label>üìù Ë¶ÅÊ±ÇÈ†òÂèñËÄÖÂ°´ÂØ´ÔºàÈÅ∏Â°´Ôºâ</Label>
                 <label className="flex items-center gap-2">
                   <input
                     type="checkbox"
                     checked={newRequiredFields.nickname}
                     onChange={(e) => setNewRequiredFields({ nickname: e.target.checked })}
                     className="w-4 h-4"
                   />
                   <span className="text-sm">Á®±Âëº / Êö±Á®±</span>
                 </label>
                 <p className="text-xs text-muted-foreground">
                   ÂãæÈÅ∏Âæå,È†òÂèñËÄÖÈúÄÂ°´ÂØ´Á®±ÂëºÊâçËÉΩËß£Èéñ
                 </p>
               </div>
               <div className="space-y-2">
                 <Label>üë§ È°ØÁ§∫Ë®≠ÂÆö</Label>
                 <label className="flex items-center gap-2">
                   <input
                     type="checkbox"
                     checked={newHideAuthor}
                     onChange={(e) => setNewHideAuthor(e.target.checked)}
                     className="w-4 h-4"
                   />
                   <span className="text-sm">Èö±Ëóè‰ΩúËÄÖË≥áË®ä</span>
                 </label>
                 <p className="text-xs text-muted-foreground">
                   ÂïüÁî®ÂæåÔºåÂâçÂè∞Â∞á‰∏çÈ°ØÁ§∫Ââµ‰ΩúËÄÖÈ†≠ÂÉè„ÄÅÂêçÁ®±ËàáÁ§æÁæ§ÈÄ£Áµê
                 </p>
               </div>
               <div className="space-y-3">
                 <label className="text-sm font-medium">üé® È†ÅÈù¢Ê®°Êùø</label>
                 <TemplateSelector
                   currentTemplate={newTemplateType}
                   onSelect={setNewTemplateType}
                 />
               </div>

               {/* ÈÄ≤ÈöéË¶èÂâáÔºàJSON Á∑®ËºØÂô® - Phase 1 Á∞°ÁâàÔºâ */}
               <div className="space-y-2">
                 <Label>üß© ÈÄ≤ÈöéË¶èÂâáÔºàÂ§öÈóúÈçµÂ≠óÔºâ</Label>
                 {userProfile?.membership_tier === 'free' ? (
                   <div className="p-3 rounded border bg-muted/30 text-sm">
                     Ê≠§ÂäüËÉΩÁÇ∫ÈÄ≤ÈöéÂäüËÉΩÔºåË´ãÂçáÁ¥öÂæå‰ΩøÁî®„ÄÇ
                   </div>
                 ) : (
                   <>
                     <label className="flex items-center gap-2">
                       <input
                         type="checkbox"
                         checked={newUnlockEnabled}
                         onChange={(e) => setNewUnlockEnabled(e.target.checked)}
                         className="w-4 h-4"
                       />
                       <span className="text-sm">ÂïüÁî®Â§öÈóúÈçµÂ≠óË¶èÂâáÔºàOR Ê®°ÂºèÔºâ</span>
                     </label>
                     {newUnlockEnabled && (
                       <div className="space-y-3">
                         <div>
                           <Label>ÈóúÈçµÂ≠óÂàóË°®ÔºàÈÄóËôüÂàÜÈöîÔºâ</Label>
                           <Textarea
                             value={newUnlockKeywords}
                             onChange={(e) => setNewUnlockKeywords(e.target.value)}
                             rows={3}
                             placeholder="alpha, beta, gamma"
                           />
                           <p className="text-xs text-muted-foreground mt-1">
                             Ëº∏ÂÖ• 1 ÂÄãÊàñÂ§öÂÄãÈóúÈçµÂ≠óÔºå‰ΩøÁî®ÈÄóËôüÂàÜÈöî„ÄÇ‰ªª‰∏ÄÁ¨¶ÂêàÂç≥Ëß£Èéñ
                           </p>
                         </div>
                       </div>
                     )}
                   </>
                 )}
               </div>
               </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-medium">üì∑ Ë≥áÊñôÂåÖÂúñÁâáÔºàÊúÄÂ§ö 5 ÂºµÔºâ</label>
                  <div className="flex gap-2">
                    <AlertDialog>
                      <AlertDialogTrigger asChild>
                        <Button
                          type="button"
                          variant="secondary"
                          size="sm"
                        >
                          ‰∏äÂÇ≥ÂúñÁâá
                        </Button>
                      </AlertDialogTrigger>
                      <AlertDialogContent>
                        <AlertDialogHeader>
                          <AlertDialogTitle>ÊòØÂê¶ÂâçÂæÄÂúñÈ¥®‰∏äÂÇ≥Ôºü</AlertDialogTitle>
                          <AlertDialogDescription>
                            ÊàëÂÄëÊúÉÂú®Êñ∞ÂàÜÈ†ÅÈñãÂïü duk.tw„ÄÇË´ãÂÆåÊàê‰∏äÂÇ≥ÂæåÔºåË§áË£ΩÂúñÁâáÈÄ£Áµê‰∏¶Ë≤ºÂõû„ÄåË≥áÊñôÂåÖÂúñÁâá„ÄçÊ¨Ñ‰Ωç„ÄÇ
                          </AlertDialogDescription>
                        </AlertDialogHeader>
                        <AlertDialogFooter>
                          <AlertDialogCancel>ÂèñÊ∂à</AlertDialogCancel>
                          <AlertDialogAction onClick={() => window.open('https://duk.tw/u', '_blank')}>
                            ÂâçÂæÄÂúñÈ¥®
                          </AlertDialogAction>
                        </AlertDialogFooter>
                      </AlertDialogContent>
                    </AlertDialog>
                    <Dialog open={showBatchImageDialog && !isEditMode} onOpenChange={(open) => {
                      if (!isEditMode) setShowBatchImageDialog(open);
                    }}>
                      <DialogTrigger asChild>
                        <Button
                          type="button"
                          variant="outline"
                          size="sm"
                          onClick={() => {
                            setIsEditMode(false);
                            setShowBatchImageDialog(true);
                          }}
                          className="gap-2"
                        >
                          üìã ÊâπÈáèË≤ºÂÖ•
                        </Button>
                      </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>ÊâπÈáèË≤ºÂÖ•ÂúñÁâá URL</DialogTitle>
                      </DialogHeader>
                      <div className="space-y-4">
                        <Label htmlFor="batch-images">ÊØèË°å‰∏ÄÂÄã URLÔºàÊúÄÂ§ö 5 ÂÄãÔºâ</Label>
                        <Textarea
                          id="batch-images"
                          placeholder="https://example.com/image1.jpg&#10;https://example.com/image2.jpg&#10;https://example.com/image3.jpg"
                          value={batchImageInput}
                          onChange={(e) => setBatchImageInput(e.target.value)}
                          rows={8}
                        />
                        <div className="flex justify-end gap-2">
                          <Button
                            variant="outline"
                            onClick={() => {
                              setShowBatchImageDialog(false);
                              setBatchImageInput('');
                            }}
                          >
                            ÂèñÊ∂à
                          </Button>
                          <Button onClick={handleBatchImagePaste}>
                            Á¢∫ÂÆöÂåØÂÖ•
                          </Button>
                        </div>
                      </div>
                    </DialogContent>
                  </Dialog>
                  </div>
                </div>
                {newImageUrls.map((url, index) => (
                  <div key={index} className="flex gap-2">
                    <Input
                      type="url"
                      value={url}
                      onChange={(e) => {
                        const updated = [...newImageUrls];
                        updated[index] = e.target.value;
                        setNewImageUrls(updated);
                      }}
                      placeholder={`ÂúñÁâá ${index + 1} URL`}
                      className="h-10"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="icon"
                      onClick={() => setNewImageUrls(newImageUrls.filter((_, i) => i !== index))}
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                ))}
                {newImageUrls.length < 5 && (
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setNewImageUrls([...newImageUrls, ''])}
                    className="gap-2"
                  >
                    <Plus className="w-4 h-4" />
                    Êñ∞Â¢ûÂúñÁâá
                  </Button>
                )}
              </div>
              <div className="flex flex-col sm:flex-row gap-2">
                <Button type="submit" className="gradient-magic">
                  Á¢∫Ë™çÊñ∞Â¢û
                </Button>
                <Button
                  type="button"
                  variant="ghost"
                  onClick={() => {
                    setShowAddForm(false);
                    setNewKeyword("");
                    setNewContent("");
                    setNewQuota("");
                    setNewExpiryDays("");
                    setNewExpiryHours("");
                    setNewExpiryMinutes("");
                    setEnableExpiry(false);
                    setNewImageUrls([]);
                    setNewPackageTitle('');
                    setNewPackageDescription('');
                    setNewRequiredFields({ nickname: false });
                    setNewTemplateType('default');
                    // reset simplified unlock rule editor states
                    setNewUnlockEnabled(false);
                    setNewUnlockKeywords('');
                    setNewHideAuthor(false);
                  }}
                >
                  ÂèñÊ∂à
                </Button>
              </div>
            </form>
          )}

          {loading ? (
            <div className="text-center py-12">
              <div className="inline-flex items-center gap-2 text-muted-foreground">
                <div className="w-5 h-5 border-2 border-accent border-t-transparent rounded-full animate-spin"></div>
                ËºâÂÖ•‰∏≠...
              </div>
            </div>
          ) : keywords.length === 0 ? (
            <div className="text-center py-12 text-muted-foreground">
              ÈÇÑÊ≤íÊúâ‰ªª‰ΩïÈóúÈçµÂ≠óÔºåÈªûÊìä‰∏äÊñπÊåâÈàïÊñ∞Â¢ûÁ¨¨‰∏ÄÂÄãÔºÅ
            </div>
          ) : filteredKeywords.length === 0 ? (
            <div className="text-center py-12 text-muted-foreground">
              Ê≤íÊúâÁ¨¶ÂêàÊ¢ù‰ª∂ÁöÑÈóúÈçµÂ≠ó
            </div>
          ) : (
            <div className="space-y-2">
              {filteredKeywords.map((item) => (
                <div
                  key={item.id}
                  className={`flex flex-col md:flex-row gap-4 p-4 rounded-lg transition-colors ${
                    isExpired(item)
                      ? 'border border-dashed border-slate-300 dark:border-slate-700 hover:bg-muted/50'
                      : 'bg-muted/30 hover:bg-muted/50'
                  }`}
                >
                  {editingKeywordId === item.id ? (
                    <div className="flex-1">
                      <p className="text-sm text-muted-foreground">Á∑®ËºØÊ®°ÂºèÂ∑≤ÂïüÁî®ÔºåË´ãÂú®Âè≥ÂÅ¥Èù¢Êùø‰∏≠Á∑®ËºØ</p>
                    </div>
                  ) : viewMode === 'card' ? (
                    <>
                      {/* Âç°ÁâáÊ®°ÂºèÔºö‰∏âÊ¨ÑÂºèÂ∏ÉÂ±Ä */}
                      <div className="flex flex-col lg:flex-row lg:items-center gap-6 flex-1">
                        {/* Â∑¶Ôºö‰∏ªË¶ÅË≥áË®äÂçÄ */}
                        <div className="flex-1 min-w-0 space-y-2">
                          {/* ÈóúÈçµÂ≠ó + ÁãÄÊÖãÈªû + ÈÅéÊúüBadge */}
                          <div className="flex items-center gap-2">
                            {(() => {
                              const status = getKeywordStatus(item);
                              const statusColors = {
                                active: 'bg-green-500',
                                warning: 'bg-yellow-500',
                                exhausted: 'bg-red-500'
                              };
                              return (
                                <span className={`w-2 h-2 rounded-full ${statusColors[status]} shrink-0`} />
                              );
                            })()}
                            <p className={`text-2xl font-bold truncate ${isExpired(item) ? 'text-muted-foreground' : 'text-accent'}`}>{item.keyword}</p>
                            {isExpired(item) && (
                              <Badge variant="destructive" className="shrink-0 bg-red-500 text-white dark:bg-red-600 dark:text-white">
                                   Â∑≤ÈÅéÊúü
                                 </Badge>
                            )}
                          </div>
                          
                          {/* ÂõûË¶ÜÂÖßÂÆπÔºàÊà™Êñ∑Ôºâ */}
                          <div className="relative group">
                            <p className="text-sm text-muted-foreground line-clamp-2 whitespace-pre-line">
                              {item.content}
                            </p>
                            {item.content.length > 100 && (
                              <div className="absolute hidden group-hover:block z-10 top-0 left-0 right-0 p-2 bg-popover border rounded-md shadow-lg max-h-48 overflow-y-auto">
                                <p className="text-sm whitespace-pre-line">{item.content}</p>
                              </div>
                            )}
                          </div>

                          {/* Â∞àÂ±¨ÈÄ£ÁµêË≥áË®ä */}
                          <div className="text-xs text-muted-foreground">
                            <span className="font-mono">
                              {item.short_code
                                ? `${window.location.origin}/${item.short_code}`
                                : `${window.location.origin}/box/${item.id}`}
                            </span>
                          </div>
                        </div>

                        {/* ‰∏≠ÔºöÁµ±Ë®àË≥áË®äÂçÄ */}
                        <div className="flex-shrink-0 lg:w-80">
                          <div className="grid grid-cols-3 gap-3">
                            {/* Á∏ΩÈ†òÂèñ - ËóçËâ≤ */}
                            <div className={`text-center p-3 rounded-lg ${
                              isExpired(item)
                                ? 'bg-slate-200/40 border-slate-300/40 text-slate-600 dark:bg-slate-800/30 dark:border-slate-700/40 dark:text-slate-300 border-dashed'
                                : 'bg-blue-500/10 border border-blue-500/20'
                            }`}>
                              <div className={`text-lg font-bold ${
                                isExpired(item)
                                  ? 'text-slate-600 dark:text-slate-400'
                                  : 'text-blue-600 dark:text-blue-400'
                              }`}>
                                {item.email_count || 0}
                              </div>
                              <div className="text-xs text-muted-foreground mt-1">Á∏ΩÈ†òÂèñ</div>
                            </div>

                            {/* ‰ªäÊó•Êñ∞Â¢û - Á∂†Ëâ≤ */}
                            <div className={`text-center p-3 rounded-lg ${
                              isExpired(item)
                                ? 'bg-slate-200/40 border-slate-300/40 text-slate-600 dark:bg-slate-800/30 dark:border-slate-700/40 dark:text-slate-300 border-dashed'
                                : 'bg-green-500/10 border border-green-500/20'
                            }`}>
                              <div className={`text-lg font-bold ${
                                isExpired(item)
                                  ? 'text-slate-600 dark:text-slate-400'
                                  : 'text-green-600 dark:text-green-400'
                              }`}>
                                +{item.today_count || 0}
                              </div>
                              <div className="text-xs text-muted-foreground mt-1">‰ªäÊó•</div>
                            </div>

                            {/* Ââ©È§òÈÖçÈ°ç - ÈªÉËâ≤ */}
                            <div className={`text-center p-3 rounded-lg ${
                              isExpired(item)
                                ? 'bg-slate-200/40 border-slate-300/40 text-slate-600 dark:bg-slate-800/30 dark:border-slate-700/40 dark:text-slate-300 border-dashed'
                                : 'bg-yellow-500/10 border border-yellow-500/20'
                            }`}>
                              <div className={`text-lg font-bold ${
                                isExpired(item)
                                  ? 'text-slate-600 dark:text-slate-400'
                                  : 'text-yellow-600 dark:text-yellow-400'
                              }`}>
                                {item.quota ? item.quota - (item.email_count || 0) : '‚àû'}
                              </div>
                              <div className="text-xs text-muted-foreground mt-1">Ââ©È§ò</div>
                            </div>
                          </div>
                          
                          {/* ÂÄíÊï∏Ë®àÊôÇÂô® - Ê°åÈù¢Áâà */}
                          {item.expires_at && !isExpired(item) && (
                            <div className="hidden lg:block mt-3">
                              <CountdownTimer expiresAt={item.expires_at} />
                            </div>
                          )}
                        </div>

                        {/* Âè≥ÔºöÊìç‰ΩúÂçÄ */}
                        <div className="flex-shrink-0 flex flex-col gap-2 lg:w-auto">
                          {/* Á∂†Ëâ≤„ÄåË§áË£ΩÈÄ£Áµê„ÄçÊåâÈàï */}
                          <Button
                            size="default"
                            className="bg-green-500 hover:bg-green-600 text-white gap-2"
                            onClick={() => {
                              if (isExpired(item)) {
                                toast.error("‚ö†Ô∏è Ê≠§Ë≥áÊñôÂåÖÂ∑≤ÈÅéÊúüÔºåÁÑ°Ê≥ï‰ΩøÁî®");
                                return;
                              }
                              const url = item.short_code
                                ? `${window.location.origin}/${item.short_code}`
                                : `${window.location.origin}/box/${item.id}`;
                              navigator.clipboard.writeText(url);
                              toast.success("ÈÄ£ÁµêÂ∑≤Ë§áË£ΩÔºÅ");
                            }}
                          >
                            üìã Ë§áË£ΩÈÄ£Áµê
                          </Button>

                          {/* ËóçËâ≤„ÄåË§áË£ΩÊñáÊ°à„ÄçÊåâÈàï */}
                          <Button
                            size="default"
                            className="bg-blue-500 hover:bg-blue-600 text-white gap-2"
                            onClick={() => {
                              const url = item.short_code
                                ? `${window.location.origin}/${item.short_code}`
                                : `${window.location.origin}/box/${item.id}`;
                              const copyText = `üéÅ ÊàëÁÇ∫‰Ω†Ê∫ñÂÇô‰∫Ü‰∏Ä‰ªΩÂ∞àÂ±¨Ë≥áÊñôÂåÖÔºÅ\nËº∏ÂÖ•ÈóúÈçµÂ≠ó„Äå${item.keyword}„ÄçÂç≥ÂèØÂÖçË≤ªÈ†òÂèñÔºö\n${url}\nüëâ Á´ãÂç≥Ëß£ÈéñÂ∞àÂ±¨ÂÖßÂÆπÔºÅ`;
                              navigator.clipboard.writeText(copyText);
                              toast.success("ÊñáÊ°àÂ∑≤Ë§áË£ΩÔºÅ");
                            }}
                          >
                            <FileText className="w-4 h-4" />
                            Ë§áË£ΩÊñáÊ°à
                          </Button>

                          {/* Ê©ôËâ≤„ÄåÊü•ÁúãË®òÈåÑ„ÄçÊåâÈàï */}
                          <Button
                            size="default"
                            className="bg-orange-500 hover:bg-orange-600 text-white gap-2"
                            onClick={() => {
                              fetchEmailLogs(item.id);
                              setOpenRecordsDialog(true);
                            }}
                          >
                            <History className="w-4 h-4" />
                            Êü•ÁúãË®òÈåÑ
                          </Button>

                          {/* ÁÅ∞Ëâ≤„ÄåÈ†êË¶Ω„ÄçÊåâÈàï */}
                          <Button
                            size="default"
                            className="bg-slate-700 hover:bg-slate-600 text-white gap-2"
                            onClick={() => {
                              if (isExpired(item)) {
                                toast.warning("‚ö†Ô∏è Ê≠§Ë≥áÊñôÂåÖÂ∑≤ÈÅéÊúü");
                              }
                              const url = item.short_code
                                ? `${window.location.origin}/${item.short_code}`
                                : `${window.location.origin}/box/${item.id}`;
                              window.open(url, '_blank');
                            }}
                          >
                            <Eye className="w-4 h-4" />
                            È†êË¶Ω
                          </Button>

                          {/* ÂûÇÁõ¥‰∏âÈªûÈÅ∏ÂñÆ */}
                          <div className="flex gap-2">
                            <Button
                              size="sm"
                              variant="ghost"
                              className="flex-1 text-accent hover:text-accent/80"
                              onClick={() => handleEdit(item)}
                              title="Á∑®ËºØ"
                            >
                              <Edit className="w-4 h-4" />
                            </Button>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="flex-1 text-destructive hover:text-destructive/80"
                              onClick={() => handleDelete(item.id, item.keyword)}
                              title="Âà™Èô§"
                            >
                              <Trash2 className="w-4 h-4" />
                            </Button>
                            <Button
                              size="sm"
                              variant="ghost"
                              className="flex-1"
                              onClick={() => window.open(`/admin/packages/${item.short_code || item.id}`, '_blank')}
                              title="ÈÄ≤ÈöéÂàÜÊûê"
                            >
                              <BarChart3 className="w-4 h-4" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    </>
                  ) : (
                    <>
                      {/* ÂàóË°®Ê®°ÂºèÔºöÁ∑äÊπäÂ∏ÉÂ±Ä */}
                      <div className="flex-1 space-y-3 min-w-0">
                        {/* ‰∏äÂçäÈÉ®ÂàÜÔºö2x2 Á∂≤Ê†º */}
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          {/* ÈóúÈçµÂ≠ó + ÈÅéÊúüBadge */}
                          <div>
                            <p className="text-xs text-muted-foreground mb-1">ÈóúÈçµÂ≠ó</p>
                            <div className="flex items-center gap-2">
                              <p className={`text-lg font-bold ${isExpired(item) ? 'text-muted-foreground' : 'text-accent'}`}>{item.keyword}</p>
                              {isExpired(item) && (
                                <Badge variant="destructive" className="shrink-0 bg-red-500 text-white dark:bg-red-600 dark:text-white">
                                    Â∑≤ÈÅéÊúü
                                  </Badge>
                              )}
                            </div>
                          </div>
                          
                          {/* ÂõûË¶ÜÂÖßÂÆπ */}
                          <div className="min-w-0">
                            <p className="text-xs text-muted-foreground mb-1">ÂõûË¶ÜÂÖßÂÆπ</p>
                            <p className="text-sm text-muted-foreground line-clamp-2 whitespace-pre-line">
                              {item.content}
                            </p>
                          </div>
                        </div>

                        {/* ‰∏ãÂçäÈÉ®ÂàÜÔºöÁµ±Ë®àË≥áË®äÊ©´Êéí */}
                        <div className="flex flex-wrap gap-4 text-sm">
                          <div className="flex items-center gap-2">
                            <span className="text-muted-foreground">üìä Á∏ΩÈ†òÂèñÔºö</span>
                            <span className="font-semibold">{item.email_count || 0} ‰∫∫</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-muted-foreground">üìà ‰ªäÊó•Ôºö</span>
                            <span className="font-semibold text-green-600 dark:text-green-400">+{item.today_count || 0}</span>
                          </div>
                        </div>
                      </div>

                      {/* ‰∏≠ÈñìÈÄ£ÁµêÊìç‰ΩúÂçÄ */}
                      <div className="space-y-2 min-w-0 md:min-w-[300px]">
                        <p className="text-xs text-muted-foreground">Â∞àÂ±¨ÈÄ£Áµê</p>
                        <div className="flex gap-2 flex-wrap">
                          <code className={`text-xs px-2 py-1 rounded flex-1 min-w-0 truncate ${
                            isExpired(item)
                              ? 'text-slate-500 dark:text-slate-400 border border-dashed border-slate-300 dark:border-slate-700'
                              : 'bg-muted'
                          }`}>
                            {item.short_code
                              ? `${window.location.origin}/${item.short_code}`
                              : `${window.location.origin}/box/${item.id}`}
                          </code>
                        </div>
                        <div className="flex gap-2 flex-wrap">
                          <Button
                            size="sm"
                            className="bg-green-500 hover:bg-green-600 text-white"
                            onClick={() => {
                              if (isExpired(item)) {
                                toast.error("‚ö†Ô∏è Ê≠§Ë≥áÊñôÂåÖÂ∑≤ÈÅéÊúüÔºåÁÑ°Ê≥ï‰ΩøÁî®");
                                return;
                              }
                              const url = item.short_code
                                ? `${window.location.origin}/${item.short_code}`
                                : `${window.location.origin}/box/${item.id}`;
                              navigator.clipboard.writeText(url);
                              toast.success("ÈÄ£ÁµêÂ∑≤Ë§áË£ΩÔºÅ");
                            }}
                          >
                            üìã Ë§áË£ΩÈÄ£Áµê
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              const url = item.short_code
                                ? `${window.location.origin}/${item.short_code}`
                                : `${window.location.origin}/box/${item.id}`;
                              const copyText = `üéÅ ÊàëÁÇ∫‰Ω†Ê∫ñÂÇô‰∫Ü‰∏Ä‰ªΩÂ∞àÂ±¨Ë≥áÊñôÂåÖÔºÅ\nËº∏ÂÖ•ÈóúÈçµÂ≠ó„Äå${item.keyword}„ÄçÂç≥ÂèØÂÖçË≤ªÈ†òÂèñÔºö\n${url}\nüëâ Á´ãÂç≥Ëß£ÈéñÂ∞àÂ±¨ÂÖßÂÆπÔºÅ`;
                              navigator.clipboard.writeText(copyText);
                              toast.success("ÊñáÊ°àÂ∑≤Ë§áË£ΩÔºÅ");
                            }}
                          >
                            Ë§áË£ΩÊñáÊ°à
                          </Button>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => {
                              if (isExpired(item)) {
                                toast.warning("‚ö†Ô∏è Ê≠§Ë≥áÊñôÂåÖÂ∑≤ÈÅéÊúü");
                              }
                              const url = item.short_code
                                ? `${window.location.origin}/${item.short_code}`
                                : `${window.location.origin}/box/${item.id}`;
                              window.open(url, '_blank');
                            }}
                          >
                            üëÅÔ∏è È†êË¶Ω
                          </Button>
                          <Button
                            size="sm"
                            className="bg-accent hover:bg-accent/90 text-accent-foreground"
                            onClick={() => {
                              fetchEmailLogs(item.id);
                              setOpenRecordsDialog(true);
                            }}
                          >
                            üìã Êü•ÁúãÈ†òÂèñË®òÈåÑ
                          </Button>
                        </div>
                      </div>

                      {/* Âè≥ÂÅ¥Á∑®ËºØÂçÄ */}
                      <div className="flex md:flex-col gap-2 self-start md:self-center shrink-0">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => handleEdit(item)}
                          className="flex-1 md:flex-none"
                        >
                          ‚úèÔ∏è Á∑®ËºØ
                        </Button>
                        <Button
                          size="sm"
                          variant="outline"
                          className="flex-1 md:flex-none text-destructive hover:text-destructive/80"
                          onClick={() => handleDelete(item.id, item.keyword)}
                        >
                          üóëÔ∏è Âà™Èô§
                        </Button>
                      </div>
                    </>
                  )}
                </div>
              ))}
            </div>
          )}

          {/* È†òÂèñË®òÈåÑÂºπÁ™ó */}
          <Dialog open={openRecordsDialog} onOpenChange={setOpenRecordsDialog}>
            <DialogContent className="max-w-3xl max-h-[80vh] overflow-hidden flex flex-col">
              <DialogHeader>
                <DialogTitle>È†òÂèñË®òÈåÑ ({emailLogs.length})</DialogTitle>
              </DialogHeader>
              <div className="flex flex-col gap-3 flex-1 overflow-hidden">
                <div className="flex flex-col sm:flex-row gap-2">
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => {
                      const emails = emailLogs.map(log => log.email).join(',');
                      navigator.clipboard.writeText(emails);
                      toast.success(`Â∑≤Ë§áË£Ω ${emailLogs.length} ÂÄã EmailÔºàÈÄóËôüÂàÜÈöîÔºâ`);
                    }}
                    className="gap-2 w-full sm:flex-1 border-accent text-accent hover:bg-accent/10"
                  >
                    Ë§áË£ΩÂÖ®ÈÉ® Email
                  </Button>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => {
                      const keyword = keywords.find(k => k.id === selectedKeywordId);
                      if (keyword) exportToCSV(selectedKeywordId, keyword.keyword);
                    }}
                    className="gap-2 w-full sm:flex-1"
                  >
                    <Download className="w-4 h-4" />
                    ÂåØÂá∫ CSV
                  </Button>
                </div>
                <div className="space-y-2 overflow-y-auto flex-1 pr-2">
                  {emailLogs.map((log) => (
                    <div key={log.id} className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-2 text-xs md:text-sm p-2 bg-muted/30 rounded">
                      <div className="flex-1 min-w-0">
                        <span className="font-medium truncate block">{log.email}</span>
                        <span className="text-muted-foreground text-xs">
                          {new Date(log.unlocked_at).toLocaleString('zh-TW')}
                        </span>
                      </div>
                      <div className="flex gap-2 shrink-0">
                        <Button
                          size="sm"
                          variant="outline"
                          onClick={() => {
                            navigator.clipboard.writeText(log.email);
                            toast.success("Email Â∑≤Ë§áË£ΩÔºÅ");
                          }}
                          className="text-accent hover:text-accent/80"
                        >
                          Ë§áË£Ω
                        </Button>
                        <Button
                          size="sm"
                          variant="ghost"
                          onClick={() => handleDeleteEmailLog(log.id, log.email)}
                          className="text-destructive hover:text-destructive/80"
                        >
                          <Trash2 className="w-3 h-3" />
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
                <div className="flex justify-end pt-3 border-t">
                  <Button
                    variant="outline"
                    onClick={() => {
                      setOpenRecordsDialog(false);
                      setSelectedKeywordId(null);
                      setEmailLogs([]);
                    }}
                  >
                    ÈóúÈñâ
                  </Button>
                </div>
              </div>
            </DialogContent>
          </Dialog>

          <div className="mt-8 pt-6 border-t border-border">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <Button
                onClick={() => navigate("/help")}
                variant="outline"
                className="w-full"
              >
                üìñ ‰ΩøÁî®Ë™™Êòé
              </Button>
              <Button
                onClick={() => navigate("/privacy")}
                variant="outline"
                className="w-full"
              >
                üîí Èö±ÁßÅÊ¨äÊîøÁ≠ñ
              </Button>
            </div>
            <p className="text-xs text-muted-foreground text-center mt-3">
              ÈúÄË¶ÅÂçîÂä©ÔºüÊü•Áúã‰ΩøÁî®Ë™™ÊòéÊàñËÅØÁπ´ÊîØÊè¥ÂúòÈöä
            </p>
          </div>
        </div>
      </div>
      {/* ÂÅ¥ÈÇäÁ∑®ËºØÈù¢Êùø */}
      <Sheet open={!!editingKeywordId} onOpenChange={(open) => !open && cancelEdit()}>
        <SheetContent side="right" className="w-full sm:max-w-[90vw] md:max-w-[80vw] lg:max-w-[70vw] p-0 overflow-hidden">
          <div className="flex h-full">
            {/* Â∑¶ÂÅ¥ÔºöÂÆåÊï¥È†ÅÈù¢È†êË¶ΩÂçÄ */}
            <div className="w-2/5 bg-muted/30 overflow-y-auto border-r">
              <SheetHeader className="p-6 pb-4 sticky top-0 bg-muted/30 backdrop-blur-sm z-10 border-b">
                <SheetTitle className="text-sm text-muted-foreground">Âç≥ÊôÇÈ†êË¶Ω</SheetTitle>
              </SheetHeader>
              <div className="relative">
                {/* Ê®°Á≥äÈÅÆÁΩ©Â±§ */}
                <div className="absolute inset-0 z-10 pointer-events-none">
                  <div className="w-full h-full backdrop-blur-[2px]"></div>
                </div>
                {/* ÂÆåÊï¥Ê®°ÊùøÈ†êË¶Ω */}
                <div className="pointer-events-none select-none scale-90 origin-top">
                  <Suspense fallback={
                    <div className="flex items-center justify-center min-h-screen">
                      <div className="w-8 h-8 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
                    </div>
                  }>
                    {(() => {
                      // Ê∫ñÂÇôÊ®°Êì¨ÁöÑ boxData
                      const previewBoxData = {
                        id: 'preview-id',
                        keyword: editKeyword || 'preview',
                        created_at: new Date().toISOString(),
                        quota: editQuota ? parseInt(editQuota) : null,
                        current_count: 0,
                        expires_at: editEnableExpiry && (editExpiryDays || editExpiryHours || editExpiryMinutes)
                          ? new Date(Date.now() + (parseInt(editExpiryDays || "0") * 24 * 60 + parseInt(editExpiryHours || "0") * 60 + parseInt(editExpiryMinutes || "0")) * 60 * 1000).toISOString()
                          : null,
                        creator_id: userId,
                        images: editImageUrls.filter(url => url.trim()) || null,
                        package_title: editPackageTitle || null,
                        package_description: editPackageDescription || null,
                        required_fields: editRequiredFields,
                        short_code: 'preview',
                        template_type: editTemplateType,
                        hide_author_info: editHideAuthor,
                      };

                      // ËºâÂÖ•Â∞çÊáâÁöÑÊ®°ÊùøÂÖÉ‰ª∂
                      const TemplateComponent = getTemplateComponent(editTemplateType);

                      // Ê∫ñÂÇôÂÇ≥Áµ¶Ê®°ÊùøÁöÑ props
                      const templateProps = {
                        boxData: previewBoxData,
                        keyword: '',
                        setKeyword: () => {},
                        email: '',
                        setEmail: () => {},
                        extraData: { nickname: '' },
                        setExtraData: () => {},
                        onUnlock: (e: React.FormEvent) => { e.preventDefault(); },
                        onReset: () => {},
                        loading: false,
                        result: null,
                        currentCount: 0,
                        waitlistCount: 0,
                        isLoggedIn: false,
                        isCreatorPreview: false,
                      };

                      return <TemplateComponent {...templateProps} />;
                    })()}
                  </Suspense>
                </div>
                {/* ÊèêÁ§∫ÊñáÂ≠ó */}
                <div className="absolute bottom-4 left-0 right-0 text-center z-20 pointer-events-none">
                  <div className="inline-block bg-background/90 backdrop-blur-sm px-4 py-2 rounded-full border shadow-lg">
                    <p className="text-xs text-muted-foreground">
                      ‚ÑπÔ∏è Âç≥ÊôÇÈ†êË¶ΩÊ®°Âºè - ‰øÆÊîπÂè≥ÂÅ¥Ë°®ÂñÆÂç≥ÂèØÁúãÂà∞ÊïàÊûú
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* Âè≥ÂÅ¥ÔºöÁ∑®ËºØË°®ÂñÆÂçÄ */}
            <div className="w-3/5 overflow-y-auto">
              <SheetHeader className="px-6 pt-6 pb-4">
                <SheetTitle>Á∑®ËºØÈóúÈçµÂ≠ó</SheetTitle>
              </SheetHeader>
              <form onSubmit={handleUpdateKeyword} className="px-6 pb-6 space-y-4">
            <div>
              <Label>ÈóúÈçµÂ≠ó</Label>
              <Input
                value={editKeyword}
                onChange={(e) => setEditKeyword(e.target.value)}
                required
                className="h-10 mt-1"
              />
            </div>

            <div>
              <Label>ÂõûË¶ÜÂÖßÂÆπ</Label>
              <Textarea
                value={editContent}
                onChange={(e) => setEditContent(e.target.value)}
                required
                className="min-h-[120px] resize-y mt-1"
              />
            </div>

            <div>
              <Label>ÈôêÈ°çÊï∏ÈáèÔºàÁïôÁ©∫=ÁÑ°ÈôêÂà∂Ôºâ</Label>
              <Input
                type="number"
                value={editQuota}
                onChange={(e) => setEditQuota(e.target.value)}
                min="1"
                className="h-10 mt-1"
              />
            </div>

            <div className="space-y-2">
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={editEnableExpiry}
                  onChange={(e) => setEditEnableExpiry(e.target.checked)}
                  className="w-4 h-4"
                />
                <span className="text-sm">ÂïüÁî®ÈôêÊôÇÈ†òÂèñ</span>
              </div>
              {editEnableExpiry && (
                <div className="flex items-center gap-2 flex-wrap">
                  <Input
                    type="text"
                    inputMode="numeric"
                    value={editExpiryDays}
                    onChange={(e) => setEditExpiryDays(e.target.value.replace(/\D/g, ''))}
                    placeholder="0"
                    className="w-16 h-10"
                  />
                  <span className="text-sm">Â§©</span>
                  <Input
                    type="text"
                    inputMode="numeric"
                    value={editExpiryHours}
                    onChange={(e) => {
                      const val = e.target.value.replace(/\D/g, '');
                      setEditExpiryHours(val ? val.padStart(2, '0') : '');
                    }}
                    placeholder="00"
                    maxLength={2}
                    className="w-16 h-10"
                  />
                  <span className="text-sm">Â∞èÊôÇ</span>
                  <Input
                    type="text"
                    inputMode="numeric"
                    value={editExpiryMinutes}
                    onChange={(e) => {
                      const val = e.target.value.replace(/\D/g, '');
                      const num = parseInt(val || '0');
                      if (num <= 59) {
                        setEditExpiryMinutes(val ? val.padStart(2, '0') : '');
                      }
                    }}
                    placeholder="00"
                    maxLength={2}
                    className="w-16 h-10"
                  />
                  <span className="text-sm">ÂàÜÈêòÂæåÂ§±Êïà</span>
                </div>
              )}
            </div>

            <div className="space-y-3">
              <div>
                <Label>üì¶ Ë≥áÊñôÂåÖÊ®ôÈ°åÔºàÈÅ∏Â°´Ôºâ</Label>
                <Input
                  value={editPackageTitle}
                  onChange={(e) => setEditPackageTitle(e.target.value)}
                  placeholder="‰æãÂ¶ÇÔºöüé® Ë®≠Ë®àÂ∏´Â∞àÂ±¨Ë≥áÊ∫êÂåÖ"
                  maxLength={50}
                  className="h-10 mt-1"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  È°ØÁ§∫Âú®Ë≥áÊñôÂåÖÈ†ÅÈù¢È†ÇÈÉ®ÔºåÊúÄÂ§ö 50 Â≠ó
                </p>
              </div>
              <div>
                <Label>üìù Ë≥áÊñôÂåÖ‰ªãÁ¥πÔºàÈÅ∏Â°´Ôºâ</Label>
                <Textarea
                  value={editPackageDescription}
                  onChange={(e) => setEditPackageDescription(e.target.value)}
                  placeholder="‰ªãÁ¥πÈÄôÂÄãË≥áÊñôÂåÖÁöÑÂÖßÂÆπ„ÄÅÈÅ©ÂêàË™∞‰ΩøÁî®..."
                  rows={3}
                  maxLength={300}
                  className="mt-1"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  È°ØÁ§∫Âú®Ë≥áÊñôÂåÖÂúñÁâá‰∏äÊñπÔºåÊúÄÂ§ö 300 Â≠ó
                </p>
              </div>
            </div>

            <div className="space-y-2">
              <Label>üìù Ë¶ÅÊ±ÇÈ†òÂèñËÄÖÂ°´ÂØ´ÔºàÈÅ∏Â°´Ôºâ</Label>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={editRequiredFields.nickname}
                  onChange={(e) => setEditRequiredFields({ nickname: e.target.checked })}
                  className="w-4 h-4"
                />
                <span className="text-sm">Á®±Âëº / Êö±Á®±</span>
              </label>
              <p className="text-xs text-muted-foreground">
                ÂãæÈÅ∏Âæå,È†òÂèñËÄÖÈúÄÂ°´ÂØ´Á®±ÂëºÊâçËÉΩËß£Èéñ
              </p>
            </div>
            <div className="space-y-2">
              <Label>üë§ È°ØÁ§∫Ë®≠ÂÆö</Label>
              <label className="flex items-center gap-2">
                <input
                  type="checkbox"
                  checked={editHideAuthor}
                  onChange={(e) => setEditHideAuthor(e.target.checked)}
                  className="w-4 h-4"
                />
                <span className="text-sm">Èö±Ëóè‰ΩúËÄÖË≥áË®ä</span>
              </label>
              <p className="text-xs text-muted-foreground">
                ÂïüÁî®ÂæåÔºåÂâçÂè∞Â∞á‰∏çÈ°ØÁ§∫Ââµ‰ΩúËÄÖÈ†≠ÂÉè„ÄÅÂêçÁ®±ËàáÁ§æÁæ§ÈÄ£Áµê
              </p>
            </div>

            <div className="space-y-3">
              <label className="text-sm font-medium">üé® È†ÅÈù¢Ê®°Êùø</label>
              <TemplateSelector
                currentTemplate={editTemplateType}
                onSelect={setEditTemplateType}
              />
            </div>

            {/* ÈÄ≤ÈöéË¶èÂâáÔºàÁ∞°Âåñ UIÔºâ */}
            <div className="space-y-2">
              <Label>üß© ÈÄ≤ÈöéË¶èÂâáÔºàÂ§öÈóúÈçµÂ≠óÔºâ</Label>
              {userProfile?.membership_tier === 'free' ? (
                <div className="p-3 rounded border bg-muted/30 text-sm">
                  Ê≠§ÂäüËÉΩÁÇ∫ÈÄ≤ÈöéÂäüËÉΩÔºåË´ãÂçáÁ¥öÂæå‰ΩøÁî®„ÄÇ
                </div>
              ) : (
                <>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={editUnlockEnabled}
                      onChange={(e) => setEditUnlockEnabled(e.target.checked)}
                      className="w-4 h-4"
                    />
                    <span className="text-sm">ÂïüÁî®Â§öÈóúÈçµÂ≠óË¶èÂâáÔºàOR Ê®°ÂºèÔºâ</span>
                  </label>
                  {editUnlockEnabled && (
                    <div className="space-y-3">
                      <div>
                        <Label>ÈóúÈçµÂ≠óÂàóË°®ÔºàÈÄóËôüÂàÜÈöîÔºâ</Label>
                        <Textarea
                          value={editUnlockKeywords}
                          onChange={(e) => setEditUnlockKeywords(e.target.value)}
                          rows={3}
                          placeholder="alpha, beta, gamma"
                        />
                        <p className="text-xs text-muted-foreground mt-1">
                          Ëº∏ÂÖ• 1 ÂÄãÊàñÂ§öÂÄãÈóúÈçµÂ≠óÔºå‰ΩøÁî®ÈÄóËôüÂàÜÈöî„ÄÇ‰ªª‰∏ÄÁ¨¶ÂêàÂç≥Ëß£Èéñ
                        </p>
                      </div>
                    </div>
                  )}
                </>
              )}
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm font-medium">üì∑ Ë≥áÊñôÂåÖÂúñÁâáÔºàÊúÄÂ§ö 5 ÂºµÔºâ</label>
                <div className="flex gap-2">
                  <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button
                        type="button"
                        variant="secondary"
                        size="sm"
                      >
                        ‰∏äÂÇ≥ÂúñÁâá
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>ÊòØÂê¶ÂâçÂæÄÂúñÈ¥®‰∏äÂÇ≥Ôºü</AlertDialogTitle>
                        <AlertDialogDescription>
                          ÊàëÂÄëÊúÉÂú®Êñ∞ÂàÜÈ†ÅÈñãÂïü duk.tw„ÄÇË´ãÂÆåÊàê‰∏äÂÇ≥ÂæåÔºåË§áË£ΩÂúñÁâáÈÄ£Áµê‰∏¶Ë≤ºÂõû„ÄåË≥áÊñôÂåÖÂúñÁâá„ÄçÊ¨Ñ‰Ωç„ÄÇ
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>ÂèñÊ∂à</AlertDialogCancel>
                        <AlertDialogAction onClick={() => window.open('https://duk.tw/u', '_blank')}>
                          ÂâçÂæÄÂúñÈ¥®
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
                  <Dialog open={showBatchImageDialog && isEditMode} onOpenChange={(open) => {
                    if (isEditMode) setShowBatchImageDialog(open);
                  }}>
                    <DialogTrigger asChild>
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={() => {
                          setIsEditMode(true);
                          setShowBatchImageDialog(true);
                        }}
                        className="gap-2"
                      >
                        üìã ÊâπÈáèË≤ºÂÖ•
                      </Button>
                    </DialogTrigger>
                  <DialogContent>
                    <DialogHeader>
                      <DialogTitle>ÊâπÈáèË≤ºÂÖ•ÂúñÁâá URL</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <Label htmlFor="batch-images-edit">ÊØèË°å‰∏ÄÂÄã URLÔºàÊúÄÂ§ö 5 ÂÄãÔºâ</Label>
                      <Textarea
                        id="batch-images-edit"
                        placeholder="https://example.com/image1.jpg&#10;https://example.com/image2.jpg&#10;https://example.com/image3.jpg"
                        value={batchImageInput}
                        onChange={(e) => setBatchImageInput(e.target.value)}
                        rows={8}
                      />
                      <div className="flex justify-end gap-2">
                        <Button
                          variant="outline"
                          onClick={() => {
                            setShowBatchImageDialog(false);
                            setBatchImageInput('');
                          }}
                        >
                          ÂèñÊ∂à
                        </Button>
                        <Button onClick={handleBatchImagePaste}>
                          Á¢∫ÂÆöÂåØÂÖ•
                        </Button>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
            </div>
            {editImageUrls.map((url, index) => (
                <div key={index} className="flex gap-2">
                  <Input
                    type="url"
                    value={url}
                    onChange={(e) => {
                      const updated = [...editImageUrls];
                      updated[index] = e.target.value;
                      setEditImageUrls(updated);
                    }}
                    placeholder={`ÂúñÁâá ${index + 1} URL`}
                    className="h-10"
                  />
                  <Button
                    type="button"
                    variant="ghost"
                    size="icon"
                    onClick={() => setEditImageUrls(editImageUrls.filter((_, i) => i !== index))}
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>
                </div>
              ))}
              {editImageUrls.length < 5 && (
                <Button
                  type="button"
                  variant="outline"
                  size="sm"
                  onClick={() => setEditImageUrls([...editImageUrls, ''])}
                  className="gap-2"
                >
                  <Plus className="w-4 h-4" />
                  Êñ∞Â¢ûÂúñÁâá
                </Button>
              )}
            </div>

            <SheetFooter className="flex flex-col sm:flex-row gap-2 pt-4">
              <Button type="submit" className="gradient-magic">
                ÂÑ≤Â≠òËÆäÊõ¥
              </Button>
              <Button
                type="button"
                variant="outline"
                onClick={cancelEdit}
              >
                ÂèñÊ∂à
              </Button>
            </SheetFooter>
          </form>
            </div>
          </div>
        </SheetContent>
      </Sheet>

    </div>
  );
};

export default Creator;
